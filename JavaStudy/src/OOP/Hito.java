package OOP;

public class Hito {
	/*
	 * 추상화
	 * 	객체의 특성을 파악하여 그 객체에 들어가야 할 프로퍼티, 기능등을 정하는 것
	 * 	실제 기능 이외에 접근 막기위해 정보를 숨긴다.
	 * 		정보은닉
	 * 		자동차-색상, 기종, 번호판...
	 * 		private, protect
	 * 
	 * 캡슐화
	 * 	객체에 사용되는 프로퍼티와 그 프로퍼티를 향한 기능을 한곳에 모아두는 것
	 * 	사용자의 접근제어, 사용자가 불필요하게 정보를 얻거나 접근을 막기위해
	 *  java에서는 getter, setter를 이용해 사용자가 정보 제어 및 가져가는것?을 허용? 
	 * 		자동차, 기아, 현대, 르노 등등... 공통되는 부분을 한곳에 모아둠.
	 * 		getter setter
	 * 
	 * 상속
	 *	부모 혹은 조상의 기능, 프로퍼티를 자식이 가져와 사용하는 것
	 *		맞지 않는 기능을 고쳐 사용: 오버라이딩
	 * 		public class Jasik extends Bumo{
	 * 		오버리아딩: 부모, 조상한테 메소드를/변수/배열을 받았는데 맞지않는 경우Overriding을 하여
	 * 		맞게 변경
	 * 		@Override
	 * 		메소드 선언하고 변경
	 * 
	 * 다형성
	 * 		오버로딩
	 * 같은 메소드 여러개 선언, 매개변수마다 다르게, 혹은 똑같이 작동하도록
	 * 		public static int sum(int a, int b){
	 * 		public static int sum(double a, int b){
	 * 		public static int sum(double a, double b){
	 * 
	 */
}
